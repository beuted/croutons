[gd_resource type="Shader" format=2]

[resource]
code = "shader_type particles;

uniform int trail_divisor = 2;

float rand_from_seed(inout uint seed){
    int k;
    int s = int(seed);
    if(s == 0){
        s = 305420679;
        k = s / 127773;
        s = 16087 * (s - k * 127773) - 2836 * k;
    }
    if(s < 0){
        s += 2147483647;
        seed = uint(s);
    }
    return float(seed % uint(65536)) / 65535.0;
}

float rand_from_m1_p1(inout uint seed){
    return rand_from_seed(seed) * 2.0 - 1.0;
}

uint hash(uint x){
    x = ((x >> uint(16)) ^ x) * uint(73244475);
    x = ((x >> uint(16)) ^ x) * uint(73244475);
    x = (x >> uint(16)) ^ x;
    return x;
}

void vertex(){
	if (RESTART) {
		uint base_number = NUMBER / uint(trail_divisor);
	    uint seed1 = hash(base_number + uint(1) + RANDOM_SEED);
	    uint seed2 = hash(base_number + uint(2) + RANDOM_SEED);
	    float rand1 = rand_from_m1_p1(seed1);
	    float rand2 = rand_from_m1_p1(seed2);
		TRANSFORM[3].xyz = vec3(800.0 * rand1, 0, 0.0);
	    VELOCITY = vec3(0, abs(100.0 * rand2+300.0), 0.0);
	    COLOR = vec4(fract(rand1), fract(rand2), sin(TIME), 1.0);
	} else {

	}
}"
